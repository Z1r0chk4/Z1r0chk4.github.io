//border

@mixin border($border-color: false) {
  border-width: 1px;
  border-style: solid;
  border-color: $border-color;
}

//size

@mixin size($size) {
  width: $size;
  height: $size;
}

//flex

@mixin flex($display: flex, $justify-content: false, $align-items: false) {
  display: $display;
  @if $justify-content {
    justify-content: $justify-content;
  }
  @if $align-items {
    align-items: $align-items;
  }
}

//font

@mixin font($size: false, $colour: false, $weight: false, $lh: false) {
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}

//pseudo element

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy==xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    transform: translate(-50%, -50%);
  }
  @else if $xy==x {
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }
  @else if $xy==y {
    top: 50%;
    bottom: auto;
    transform: translateY(-50%);
  }
}

//animation for portfolio

:root {
  --offset: 1rem;
}

$offset: var(--offset);

@mixin moveInGrid($cols, $n) {
  $rows: ceil($n / $cols);
  .grid {       
    grid-template-columns: repeat($cols, 1fr);
    grid-template-rows: repeat($rows, 100% / $rows);
    .portfolio_block:last-child:after,
    .portfolio_block:last-child:before {
      left: 100% * (($cols - $n) % $cols);
      transform: translate3d(-100% * (($cols - 1) / 2), -100% * (($rows - 1) / 2), 0);
    }
    @for $i from 1 through $n - 1 {
      $x: ($cols - $i) % $cols;
      $y: $rows - floor(($i - 1) / $cols) - 1;
      .portfolio_block:nth-child(#{$i}):hover ~ .portfolio_block:last-child:after,
      .portfolio_block:nth-child(#{$i}):hover ~ .portfolio_block:last-child:before {
        transform: translate3d(-$x*100%, -$y*100%, 0);   
      }
    }
    .portfolio_block:last-child:hover:after,
    .portfolio_block:last-child:hover:before {
      transform: translate3d(-100% * (($cols - $n) % $cols), 0%, 0);  
    }
  }
}

// media

// breakpoints

$X: 576px;
$S: 768px;
$M: 992px;
$L: 1200px;
$E: 1440px;

@mixin MQlite($media) {
  @if $media==xm {
    @media only screen and (max-width: $X - 1) {
      @content;
    }
  }
  @else if $media==sm {
    @media only screen and (max-width: $S - 1) {
      @content;
    }
  }
  @else if $media==md {
    @media only screen and (max-width: $M - 1) {
      @content;
    }
  }
  @else if $media==lg {
    @media only screen and (max-width: $L - 1) {
      @content;
    }
  }
  @else if $media==el {
    @media only screen and (max-width: $E - 1) {
      @content;
    }
  }
}

@mixin MQ($media) {
  @if $media==xs {
    @media only screen and (max-width: $X - 1) {
      @content;
    }
  }
  @else if $media==es {
    @media only screen and (min-width: $X) and (max-width: $S - 1) {
      @content;
    }
  }
  @else if $media==sm {
    @media only screen and (min-width: $S) and (max-width: $M - 1) {
      @content;
    }
  }
  @else if $media==md {
    @media only screen and (min-width: $M) and (max-width: $L - 1) {
      @content;
    }
  }
  @else if $media==lg {
    @media only screen and (min-width: $L) and (max-width: $E - 1) {
      @content;
    }
  }
  @else if $media==el {
    @media only screen and (min-width: $E) {
      @content;
    }
  }
}